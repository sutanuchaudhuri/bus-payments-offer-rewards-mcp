<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/models/responses.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/models/responses.py" />
              <option name="originalContent" value="from pydantic import BaseModel, Field&#10;from typing import List&#10;from .customer import Customer&#10;from .merchant import Merchant&#10;from .payment import Payment&#10;from .offer import Offer&#10;from .reward import Reward&#10;from .profile_history import CustomerProfileHistory&#10;&#10;# Health Response Model&#10;class HealthResponse(BaseModel):&#10;    &quot;&quot;&quot;Health check response model&quot;&quot;&quot;&#10;    status: str = Field(..., description=&quot;API health status&quot;)&#10;    timestamp: str = Field(..., description=&quot;Current timestamp&quot;)&#10;&#10;# List Response Models&#10;class CustomerListResponse(BaseModel):&#10;    &quot;&quot;&quot;Customer list response model&quot;&quot;&quot;&#10;    customers: List[Customer] = Field(..., description=&quot;List of customers&quot;)&#10;    total: int = Field(..., description=&quot;Total number of customers&quot;)&#10;    page: int = Field(..., description=&quot;Current page number&quot;)&#10;    per_page: int = Field(..., description=&quot;Items per page&quot;)&#10;    pages: int = Field(..., description=&quot;Total number of pages&quot;)&#10;&#10;class MerchantListResponse(BaseModel):&#10;    &quot;&quot;&quot;Merchant list response model&quot;&quot;&quot;&#10;    merchants: List[Merchant] = Field(..., description=&quot;List of merchants&quot;)&#10;    total: int = Field(..., description=&quot;Total number of merchants&quot;)&#10;&#10;class PaymentListResponse(BaseModel):&#10;    &quot;&quot;&quot;Payment list response model&quot;&quot;&quot;&#10;    payments: List[Payment] = Field(..., description=&quot;List of payments&quot;)&#10;    total: int = Field(..., description=&quot;Total number of payments&quot;)&#10;&#10;class OfferListResponse(BaseModel):&#10;    &quot;&quot;&quot;Offer list response model&quot;&quot;&quot;&#10;    offers: List[Offer] = Field(..., description=&quot;List of offers&quot;)&#10;&#10;class RewardListResponse(BaseModel):&#10;    &quot;&quot;&quot;Reward list response model&quot;&quot;&quot;&#10;    rewards: List[Reward] = Field(..., description=&quot;List of rewards&quot;)&#10;&#10;# Complex Response Models&#10;class RewardBalanceResponse(BaseModel):&#10;    &quot;&quot;&quot;Reward balance response model&quot;&quot;&quot;&#10;    total_points: int = Field(..., description=&quot;Total points earned&quot;)&#10;    available_points: int = Field(..., description=&quot;Available points for redemption&quot;)&#10;    dollar_value: float = Field(..., description=&quot;Dollar value of available points&quot;)&#10;&#10;class ProfileHistoryResponse(BaseModel):&#10;    &quot;&quot;&quot;Profile history response model&quot;&quot;&quot;&#10;    history: List[CustomerProfileHistory] = Field(..., description=&quot;List of profile history records&quot;)&#10;&#10;class CustomerProfileHistoryResponse(BaseModel):&#10;    &quot;&quot;&quot;Customer profile history response model&quot;&quot;&quot;&#10;    history: List[CustomerProfileHistory] = Field(..., description=&quot;List of profile history records&quot;)&#10;    total_saved: float = Field(..., description=&quot;Total amount saved by customer&quot;)&#10;&#10;class PaymentResponse(BaseModel):&#10;    &quot;&quot;&quot;Payment processing response model&quot;&quot;&quot;&#10;    payment: Payment = Field(..., description=&quot;Payment details&quot;)&#10;    rewards_earned: int = Field(..., description=&quot;Rewards points earned&quot;)&#10;    offers_applied: List[dict] = Field(..., description=&quot;Offers applied to this payment&quot;)&#10;&#10;class MerchantAnalyticsResponse(BaseModel):&#10;    &quot;&quot;&quot;Merchant analytics response model&quot;&quot;&quot;&#10;    total_transactions: int = Field(..., description=&quot;Total number of transactions&quot;)&#10;    total_amount: float = Field(..., description=&quot;Total transaction amount&quot;)&#10;    total_discounts: float = Field(..., description=&quot;Total discounts given&quot;)&#10;    active_offers: int = Field(..., description=&quot;Number of active offers&quot;)&#10;" />
              <option name="updatedContent" value="from pydantic import BaseModel, Field&#10;from typing import List&#10;from .customer import Customer&#10;from .merchant import Merchant&#10;from .payment import Payment&#10;from .offer import Offer&#10;from .reward import Reward&#10;from .profile_history import CustomerProfileHistory&#10;from datetime import datetime&#10;&#10;# Health Response Model&#10;class HealthResponse(BaseModel):&#10;    &quot;&quot;&quot;Health check response model&quot;&quot;&quot;&#10;    status: str = Field(..., description=&quot;API health status&quot;, example=&quot;healthy&quot;)&#10;    timestamp: datetime = Field(..., description=&quot;Current timestamp&quot;)&#10;&#10;# List Response Models&#10;class CustomerListResponse(BaseModel):&#10;    &quot;&quot;&quot;Customer list response model&quot;&quot;&quot;&#10;    customers: List[Customer] = Field(..., description=&quot;List of customers&quot;)&#10;    total: int = Field(..., description=&quot;Total number of customers&quot;)&#10;    page: int = Field(..., description=&quot;Current page number&quot;)&#10;    per_page: int = Field(..., description=&quot;Items per page&quot;)&#10;    pages: int = Field(..., description=&quot;Total number of pages&quot;)&#10;&#10;class MerchantListResponse(BaseModel):&#10;    &quot;&quot;&quot;Merchant list response model&quot;&quot;&quot;&#10;    merchants: List[Merchant] = Field(..., description=&quot;List of merchants&quot;)&#10;    total: int = Field(..., description=&quot;Total number of merchants&quot;)&#10;&#10;class PaymentListResponse(BaseModel):&#10;    &quot;&quot;&quot;Payment list response model&quot;&quot;&quot;&#10;    payments: List[Payment] = Field(..., description=&quot;List of payments&quot;)&#10;    total: int = Field(..., description=&quot;Total number of payments&quot;)&#10;&#10;class OfferListResponse(BaseModel):&#10;    &quot;&quot;&quot;Offer list response model&quot;&quot;&quot;&#10;    offers: List[Offer] = Field(..., description=&quot;List of offers&quot;)&#10;&#10;class RewardListResponse(BaseModel):&#10;    &quot;&quot;&quot;Reward list response model&quot;&quot;&quot;&#10;    rewards: List[Reward] = Field(..., description=&quot;List of rewards&quot;)&#10;&#10;# Complex Response Models&#10;class RewardBalanceResponse(BaseModel):&#10;    &quot;&quot;&quot;Reward balance response model&quot;&quot;&quot;&#10;    total_points: int = Field(..., description=&quot;Total points earned&quot;)&#10;    available_points: int = Field(..., description=&quot;Available points for redemption&quot;)&#10;    dollar_value: float = Field(..., description=&quot;Dollar value of available points&quot;)&#10;&#10;class ProfileHistoryResponse(BaseModel):&#10;    &quot;&quot;&quot;Profile history response model&quot;&quot;&quot;&#10;    history: List[CustomerProfileHistory] = Field(..., description=&quot;List of profile history records&quot;)&#10;&#10;class CustomerProfileHistoryResponse(BaseModel):&#10;    &quot;&quot;&quot;Customer profile history response model&quot;&quot;&quot;&#10;    history: List[CustomerProfileHistory] = Field(..., description=&quot;List of profile history records&quot;)&#10;    total_saved: float = Field(..., description=&quot;Total amount saved by customer&quot;)&#10;&#10;class PaymentResponse(BaseModel):&#10;    &quot;&quot;&quot;Payment processing response model&quot;&quot;&quot;&#10;    payment: Payment = Field(..., description=&quot;Payment details&quot;)&#10;    rewards_earned: int = Field(..., description=&quot;Rewards points earned&quot;)&#10;    offers_applied: List[dict] = Field(..., description=&quot;Offers applied to this payment&quot;)&#10;&#10;class MerchantAnalyticsResponse(BaseModel):&#10;    &quot;&quot;&quot;Merchant analytics response model&quot;&quot;&quot;&#10;    total_transactions: int = Field(..., description=&quot;Total number of transactions&quot;)&#10;    total_amount: float = Field(..., description=&quot;Total transaction amount&quot;)&#10;    total_discounts: float = Field(..., description=&quot;Total discounts given&quot;)&#10;    active_offers: int = Field(..., description=&quot;Number of active offers&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tools/credit_card_tools.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tools/credit_card_tools.py" />
              <option name="originalContent" value="from fastmcp import FastMCP&#10;from fastapi import Path, Body&#10;from models import CreditCardCreate&#10;&#10;def register_credit_card_tools(mcp: FastMCP):&#10;    &quot;&quot;&quot;Register credit card-related MCP tools&quot;&quot;&quot;&#10;    &#10;    @mcp.tool(&#10;        name=&quot;add_credit_card&quot;,&#10;        description=&quot;Add a new credit card to a customer's account with complete card details including number, holder name, expiry date, product type, and credit limit. Supports multiple card types (PLATINUM, GOLD, SILVER, BASIC) and validates card information.&quot;,&#10;        tags={&quot;credit_cards&quot;, &quot;payment_methods&quot;, &quot;card_management&quot;, &quot;customer_accounts&quot;},&#10;        meta={&quot;version&quot;: &quot;1.0&quot;, &quot;category&quot;: &quot;credit_card_management&quot;}&#10;    )&#10;    async def add_credit_card(&#10;        customer_id: int = Path(..., description=&quot;Unique customer identifier to associate the credit card with&quot;),&#10;        card: CreditCardCreate = Body(..., description=&quot;Credit card details including number, holder name, expiry, and limits&quot;)&#10;    ) -&gt; dict:&#10;        &quot;&quot;&quot;Add a new credit card to customer account&quot;&quot;&quot;&#10;        # Stub implementation - replace with actual database logic&#10;        return {&quot;message&quot;: &quot;Credit card added successfully&quot;, &quot;card_id&quot;: 1}&#10;" />
              <option name="updatedContent" value="from fastmcp import FastMCP&#10;from fastapi import Path, Body&#10;from models import CreditCardCreate&#10;&#10;def register_credit_card_tools(mcp: FastMCP):&#10;    &quot;&quot;&quot;Register credit card-related MCP tools&quot;&quot;&quot;&#10;    &#10;    @mcp.tool(&#10;        name=&quot;add_credit_card&quot;,&#10;        description=&quot;Add a new credit card to a customer's account with complete card details including number, holder name, expiry date, product type, and credit limit. Supports multiple card types (PLATINUM, GOLD, SILVER, BASIC) and validates card information.&quot;,&#10;        tags={&quot;credit_cards&quot;, &quot;payment_methods&quot;, &quot;card_management&quot;, &quot;customer_accounts&quot;},&#10;        meta={&quot;version&quot;: &quot;1.0&quot;, &quot;category&quot;: &quot;credit_card_management&quot;}&#10;    )&#10;    async def add_credit_card(&#10;        customer_id: int = Path(..., description=&quot;Unique customer identifier to associate the credit card with&quot;),&#10;        card: CreditCardCreate = Body(..., description=&quot;Credit card details including number, holder name, expiry, and limits&quot;)&#10;    ) -&gt; dict:&#10;        &quot;&quot;&quot;Add a new credit card to customer account&quot;&quot;&quot;&#10;        # Stub implementation - replace with actual database logic&#10;        return {&quot;message&quot;: &quot;Credit card added successfully&quot;, &quot;card_id&quot;: 1}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tools/health_tools.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tools/health_tools.py" />
              <option name="originalContent" value="from fastmcp import FastMCP&#10;from datetime import datetime&#10;from models import HealthResponse&#10;&#10;def register_health_tools(mcp: FastMCP):&#10;    &quot;&quot;&quot;Register health-related MCP tools&quot;&quot;&quot;&#10;    &#10;    @mcp.tool(&#10;        name=&quot;health_check&quot;,&#10;        description=&quot;Perform a comprehensive health check of the credit card payment system API. Returns current system status, timestamp, and operational readiness indicators for monitoring and diagnostics.&quot;,&#10;        tags={&quot;health&quot;, &quot;monitoring&quot;, &quot;diagnostics&quot;, &quot;system_status&quot;},&#10;        meta={&quot;version&quot;: &quot;1.0&quot;, &quot;category&quot;: &quot;system_health&quot;}&#10;    )&#10;    async def health_check() -&gt; HealthResponse:&#10;        &quot;&quot;&quot;Health check endpoint to verify API status&quot;&quot;&quot;&#10;        return HealthResponse(status=&quot;healthy&quot;, timestamp=datetime.utcnow())&#10;" />
              <option name="updatedContent" value="from fastmcp import FastMCP&#10;from datetime import datetime&#10;from models import HealthResponse&#10;&#10;def register_health_tools(mcp: FastMCP):&#10;    &quot;&quot;&quot;Register health-related MCP tools&quot;&quot;&quot;&#10;    &#10;    @mcp.tool(&#10;        name=&quot;health_check&quot;,&#10;        description=&quot;Perform a comprehensive health check of the credit card payment system API. Returns current system status, timestamp, and operational readiness indicators for monitoring and diagnostics.&quot;,&#10;        tags={&quot;health&quot;, &quot;monitoring&quot;, &quot;diagnostics&quot;, &quot;system_status&quot;},&#10;        meta={&quot;version&quot;: &quot;1.0&quot;, &quot;category&quot;: &quot;system_health&quot;}&#10;    )&#10;    async def health_check() -&gt; HealthResponse:&#10;        &quot;&quot;&quot;Health check endpoint to verify API status&quot;&quot;&quot;&#10;        return HealthResponse(status=&quot;healthy&quot;, timestamp=datetime.utcnow())" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>